name: Publish to GitHub Packages

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  version:
    name: Auto Version Bump
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check if version changed
        id: check_version
        run: |
          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Get the last commit message
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Check if the last commit was a version bump
          if [[ $LAST_COMMIT_MSG == *"Auto Version Bump"* ]]; then
            echo "Version was already bumped in the last commit"
            echo "should_bump=false" >> $GITHUB_OUTPUT
          else
            echo "Version needs to be bumped"
            echo "should_bump=true" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        if: steps.check_version.outputs.should_bump == 'true'
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Bump patch version
          npm version patch -m "Auto Version Bump [skip ci]"
          
          # Push the new version tag
          git push --follow-tags

  publish:
    name: Publish Package
    needs: [version]
    if: |
      always() &&
      (needs.version.result == 'success' || needs.version.result == 'skipped' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@tejidosdeagus'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Check npm version
        id: check_npm_version
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          PKG_NAME=$(node -p "require('./package.json').name")
          
          # Try to get the version from npm
          if npm view "$PKG_NAME@$PKG_VERSION" version &> /dev/null; then
            echo "Version $PKG_VERSION already exists in npm"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $PKG_VERSION is new"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GitHub Packages
        if: steps.check_npm_version.outputs.should_publish == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 